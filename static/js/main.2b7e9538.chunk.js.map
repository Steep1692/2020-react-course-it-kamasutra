{"version":3,"sources":["assets/images/profileAvatar.png","serviceWorker.js","components/main/header/header/Header.tsx","components/main/header/HeaderContainer.tsx","components/main/content/Content.tsx","components/main/sidebar/navbar/navLink/NavLinkItem.tsx","components/main/sidebar/navbar/Navbar.tsx","components/common/friendItem/FriendItem.tsx","components/main/sidebar/friendsBlock/FriendsBlock.tsx","components/main/sidebar/SidebarContainer.tsx","redux/selectors/sidebar.ts","redux/reducers/app.ts","styled/theme.ts","components/main/app/App.tsx","redux/reducers/sidebarReducer.ts","redux/store.ts","index.tsx","api/auth.ts","redux/reducers/auth.ts","utils/enums.ts","components/common/preLoader/PreLoader.tsx","redux/selectors/auth.ts","api/security.ts","redux/reducers/security.ts","utils/helpers.ts","components/main/sidebar/navbar/Navbar.module.css","components/main/sidebar/navbar/navLink/NavLinkItem.module.css","components/common/friendItem/FriendItem.module.css","components/common/avatar/Avatar.tsx","api/instance.ts","api/profile.ts","redux/reducers/profileReducer.ts","redux/reducers/dialogsReducer.ts","api/follow.ts","api/users.ts","redux/reducers/usersReducer.ts","components/common/preLoader/PreLoader.module.css","components/main/sidebar/friendsBlock/FriendsBlock.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","HeaderStyled","styled","div","BlockRight","Header","login","id","isAuth","logout","userUrl","href","src","alt","onClick","to","mapDispatch","authMe","connector","connect","state","getLogin","getCurrentUserId","getIsAuth","props","ContentStyled","UsersContainer","React","lazy","DialogsContainer","ProfileContainer","LoginContainer","Content","ProfilePage","fallback","PreLoader","exact","path","render","NavLinkItem","linkItem","name","className","s","navLinkItem","activeClassName","active","Navbar","navElements","navBar","links","map","key","listItem","nav","FriendItem","friendItem","photos","avatar","small","large","wrapAvatar","Avatar","image","FriendsBlock","friendsElements","friendsBlock","friends","Aside","sidebarReducer","initialState","isAppInitialized","errors","app","action","type","data","flag","ThemeDefault","colors","main","secondary","MainWrap","setIsAppInitialized","this","then","theme","Component","uniqueUrlName","status","followed","rootReducer","combineReducers","profileReducer","dialogsReducer","usersReducer","auth","security","form","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","instance","get","formData","post","delete","email","actions","authData","dispatch","a","authAPI","resultCode","ResponseCodes","SUCCESS","messages","userId","ANTI_BOT","fetchCaptcha","stopSubmit","_error","join","nointernet","preLoader","captchaUrl","setCaptchaUrl","url","securityApi","responseData","changeItemByPropName","arr","propName","obj","item","isTheSameAsStrings","b","WrapAvatar","AvatarImage","as","defaultAvatar","axios","create","baseURL","profile","put","file","FormData","append","headers","ADD_POST","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","lookingForAJob","lookingForAJobDescription","fullName","posts","author","likesCount","addPost","postText","setUserProfile","fetchProfile","profileAPI","fetchStatus","updateStatus","log","updateAvatar","updateProfile","newProfile","dialogs","dialog","interlocutor","sendMessage","messageText","count","page","FOLLOW","users","currentPage","itemsPerPage","totalItemsCount","isDataFetching","isFollowingFetching","followingFetchingList","followAC","unfollowAC","setUsers","setCurrentPage","setDataFetching","setIsFollowingFetching","followUnfollowFlow","apiMethod","actionCreator","follow","followAPI","unfollow","fetchUsers","userAPI","items","totalCount","filter"],"mappings":"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","file":"static/js/main.2b7e9538.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profileAvatar.c9041f3f.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached profile has been fetched,\n              // but the previous service worker will still serve the older\n              // profile until all client tabs are closed.\n              console.log(\n                'New profile is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" messageItem.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {FC} from 'react'\nimport {NavLink} from 'react-router-dom'\nimport styled from 'styled-components'\n\nconst HeaderStyled = styled.div`\n    grid-area: header;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n\n    background-color: #2a712d;\n    box-shadow: 0px 0px 2px 0px #000;\n    \n    img {\n        max-height: 50px;\n    }\n`\nconst BlockRight = styled(HeaderStyled)`\n    text-align: right;\n`\n\ntype Props = {\n    login: string | null\n    id: number | null\n    isAuth: boolean\n    logout: () => void\n}\n\nconst Header: FC<Props> = ({login, id, isAuth, logout}) => {\n    const userUrl = `/profile/${id}`\n\n    return (\n        <HeaderStyled>\n            <div>\n                <a href='/'>\n                    <img\n                        src='#!'\n                        alt='Logotype'\n                    />\n                </a>\n            </div>\n            <BlockRight>\n                {isAuth && <div><a href={userUrl}>{ login }</a> - <button onClick={logout}>Logout</button></div>}\n                {!isAuth && <NavLink to='/login'>Login</NavLink>}\n            </BlockRight>\n        </HeaderStyled>\n    )\n}\n\nexport default Header","import React, {FC} from 'react'\nimport Header from './header/Header'\nimport {connect, ConnectedProps} from 'react-redux'\nimport {authMe, logout,} from '../../../redux/reducers/auth'\nimport {AppStateType} from '../../../redux/store'\nimport {getCurrentUserId, getIsAuth, getLogin} from '../../../redux/selectors/auth'\n\nconst mapState = (state: AppStateType) => ({\n    login: getLogin(state),\n    id: getCurrentUserId(state),\n    isAuth: getIsAuth(state),\n})\nconst mapDispatch = {\n    authMe,\n    logout,\n}\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & {}\n\nconst HeaderContainer: FC<Props> = (props) => {\n    const {\n        login,\n        id,\n        logout,\n        isAuth,\n    } = props\n\n    return (\n        <Header\n            isAuth={isAuth}\n            login={login}\n            id={id}\n            logout={logout}\n        />\n    )\n}\n\nexport default connector(HeaderContainer)\n","import React, {FC, Suspense} from 'react'\nimport {Route} from 'react-router-dom'\nimport PreLoader from '../../common/preLoader/PreLoader'\nimport styled from 'styled-components'\n\nconst ContentStyled = styled.div`\n    overflow: hidden;\n    grid-area: content;\n    border-radius: 8px;\n\n    background-color: #fff;\n    box-shadow: 0px 0px 2px 0px #000;\n`\n\nconst UsersContainer = React.lazy(() => import('../../pages/users/UsersContainer'))\nconst DialogsContainer = React.lazy(() => import('../../pages/dialogs/DialogsContainer'))\nconst ProfileContainer = React.lazy(() => import('../../pages/profile/ProfileContainer'))\nconst LoginContainer = React.lazy(() => import('../../pages/login/LoginContainer'))\n\nconst Content: FC = () => {\n    const ProfilePage = () => <ProfileContainer/>\n    const DialogsPage = () => <DialogsContainer/>\n    const UsersPage = () => <UsersContainer/>\n    const LoginPage = () => <LoginContainer/>\n\n    return (\n        <ContentStyled>\n            <Suspense fallback={<PreLoader/>}>\n                <Route\n                    exact\n                    path='/'\n                    render={ProfilePage}\n                />\n                <Route\n                    exact\n                    path='/login'\n                    render={LoginPage}\n                />\n                <Route\n                    path='/profile/:userId?'\n                    render={ProfilePage}\n                />\n                <Route\n                    path='/dialogs'\n                    render={DialogsPage}\n                />\n                <Route\n                    path='/users'\n                    render={UsersPage}\n                />\n            </Suspense>\n        </ContentStyled>\n    )\n}\n\nexport default Content\n","import React, {FC} from 'react'\nimport s from './NavLinkItem.module.css'\nimport {NavLink} from 'react-router-dom'\nimport {LinkType} from \"../../../../../models/navbar\";\n\ntype Props = {\n    linkItem: LinkType\n}\n\nconst NavLinkItem: FC<Props> = ({linkItem}) => {\n    const {\n        to,\n        name,\n    } = linkItem\n\n    return (\n        <NavLink\n            to={to}\n            className={s.navLinkItem}\n            activeClassName={s.active}\n        >{name}</NavLink>\n    )\n}\n\nexport default NavLinkItem\n","import React, {FC} from 'react'\nimport s from './Navbar.module.css'\nimport NavLinkItem from './navLink/NavLinkItem'\nimport {NavBarType} from \"../../../../models/navbar\";\n\ntype Props = {\n    navBar: NavBarType\n}\n\nconst Navbar: FC<Props> = ({navBar}) => {\n    const {\n        links,\n    } = navBar\n\n    const navElements =links.map((linkItem, key) => (\n        <li\n            className={s.listItem}\n            key={key}\n        >\n            <NavLinkItem\n                linkItem={linkItem}\n            />\n        </li>\n    ))\n\n    return (\n        <nav className={s.nav}>\n            <h3>Navigation</h3>\n            <ul>\n                { navElements }\n            </ul>\n        </nav>\n    )\n}\n\nexport default Navbar\n","import React, {FC} from 'react'\nimport s from './FriendItem.module.css'\nimport {NavLink} from \"react-router-dom\"\nimport Avatar from \"../avatar/Avatar\"\nimport {FriendType} from \"../../../models/friends\";\n\ntype Props = {\n    friendItem: FriendType\n}\n\nconst FriendItem: FC<Props> = ({friendItem}) => {\n    const {\n        id,\n        name,\n        photos,\n    } = friendItem\n    const path = `/profile/${id}`\n    const avatar = photos.small || photos.large\n\n    return (\n        <div\n            className={s.friendItem}\n        >\n            <NavLink\n                to={path}\n            >\n                <div className={s.wrapAvatar}>\n                    <Avatar image={avatar}/>\n                </div>\n                <span>{name}</span>\n            </NavLink>\n        </div>\n    )\n}\n\nexport default FriendItem\n","import React, {FC} from 'react'\nimport s from './FriendsBlock.module.css'\nimport FriendItem from '../../../common/friendItem/FriendItem'\nimport {FriendType} from \"../../../../models/friends\";\nimport {FriendsBlockType} from \"../../../../models/navbar\";\n\ntype Props = {\n    friendsBlock: FriendsBlockType\n}\n\nconst FriendsBlock: FC<Props> = ({friendsBlock}) => {\n    const {\n        friends,\n    } = friendsBlock\n\n    const friendsElements = friends.map((friendItem: FriendType, key: number) => (\n        <li key={key}>\n            <FriendItem\n                friendItem={friendItem}\n            />\n        </li>\n    ))\n\n    return (\n        <div className={s.friendsBlock}>\n            <h3>Friends</h3>\n            <ul>\n                { friendsElements }\n            </ul>\n        </div>\n\n    )\n}\n\nexport default FriendsBlock\n","import React, {FC} from 'react'\nimport Navbar from './navbar/Navbar'\nimport FriendsBlock from './friendsBlock/FriendsBlock'\nimport {connect, ConnectedProps} from 'react-redux'\nimport {getFriendBlock, getNavBar} from '../../../redux/selectors/sidebar'\nimport {AppStateType} from '../../../redux/store'\nimport styled from 'styled-components'\n\nconst Aside = styled.div`\n    padding: 16px\n    border-radius: 8px\n\n    grid-area: aside\n\n    background-color: #fff\n    box-shadow: 0px 0px 2px 0px #000\n`\n\nconst mapState = (state: AppStateType) => ({\n    navBar: getNavBar(state),\n    friendsBlock: getFriendBlock(state),\n})\nconst mapDispatch = {}\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & {}\n\nconst SidebarContainer: FC<Props> = ({navBar, friendsBlock}) => {\n    return (\n        <Aside>\n            <Navbar navBar={navBar}/>\n            <FriendsBlock friendsBlock={friendsBlock}/>\n        </Aside>\n    )\n}\n\nexport default connector(SidebarContainer)\n","import {AppStateType} from \"../store\";\n\nexport const getNavBar = ({sidebarReducer}: AppStateType) => sidebarReducer.navBar;\nexport const getFriendBlock = ({sidebarReducer}: AppStateType) => sidebarReducer.friendsBlock;","import {InferActionsTypes} from \"../store\"\n\nconst initialState = {\n    // Needs to be false, true is a debug statement of this variable\n    isAppInitialized: true as boolean,\n    errors: [] as Array<string>,\n}\n\n\nconst app = (state = initialState, action: ActionTypes): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-IS-APP-INITIALIZED':\n            return {\n                ...state,\n                isAppInitialized: action.data.flag,\n            }\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    setIsAppInitialized: (flag: boolean) => ({\n        type: 'APP/SET-IS-APP-INITIALIZED',\n        data: {\n            flag,\n        },\n    }) as const\n}\n\nexport default app\n\nexport type InitialStateType = typeof initialState\ntype ActionTypes = InferActionsTypes<typeof actions>\n","import { DefaultTheme } from 'styled-components'\n\nconst ThemeDefault: DefaultTheme = {\n    colors: {\n        main: '#4caf50',\n        secondary: '#8bc34a',\n    },\n}\n\nexport { ThemeDefault }","import React from 'react'\nimport './App.css'\n\nimport HeaderContainer from '../header/HeaderContainer'\nimport Content from '../content/Content'\nimport Sidebar from '../sidebar/SidebarContainer'\n\nimport {HashRouter} from 'react-router-dom'\nimport {connect, ConnectedProps} from 'react-redux'\nimport {actions} from '../../../redux/reducers/app'\nimport PreLoader from '../../common/preLoader/PreLoader'\nimport {authMe} from '../../../redux/reducers/auth'\nimport {AppStateType} from '../../../redux/store'\nimport styled, {createGlobalStyle, ThemeProvider} from 'styled-components'\nimport {ThemeDefault} from '../../../styled/theme'\n\nconst MainWrap = styled.div`\n    display: grid;\n    width: 1200px;\n    margin: 0 auto;\n\n    grid-template-areas: \"header header\" \"aside content\";\n    grid-template-rows: 60px 1fr;\n    grid-template-columns: 2fr 10fr;\n    grid-gap: 10px;\n`\n\nconst mapState = ({app}: AppStateType) => ({\n    isAppInitialized: app.isAppInitialized,\n})\nconst mapDispatch = {\n    setIsAppInitialized: actions.setIsAppInitialized,\n    authMe,\n}\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & {}\n\nclass App extends React.Component<Props> {\n    componentDidMount() {\n        this.props.authMe()\n            .then(() => {\n                this.props.setIsAppInitialized(true)\n            })\n    }\n\n    render() {\n        if( !this.props.isAppInitialized ) {\n            return <PreLoader/>\n        }\n\n        return (\n            <HashRouter>\n                <ThemeProvider theme={ThemeDefault}>\n                    <MainWrap>\n                        <HeaderContainer/>\n                        <Sidebar/>\n                        <Content/>\n                    </MainWrap>\n                </ThemeProvider>\n            </HashRouter>\n        )\n    }\n}\n\nexport default connector(App)\n","import {ActionType} from '../../models/redux'\nimport {FriendsBlockType, NavBarType} from \"../../models/navbar\";\n\nconst initialState = {\n    navBar: {\n        links: [\n            {\n                to: '/profile',\n                name: 'Profile',\n            },\n            {\n                to: '/dialogs',\n                name: 'Messages',\n            },\n            {\n                to: '/users',\n                name: 'Users',\n            },\n        ],\n    } as NavBarType,\n    friendsBlock: {\n        friends: [\n            {\n                name: 'Mock name',\n                id: 1,\n                uniqueUrlName: null,\n                photos: {\n                    small: null,\n                    large: null,\n                },\n                status: 'mock status',\n                followed: false,\n            }\n        ]\n    } as FriendsBlockType,\n}\n\ntype InitialStateType = typeof initialState\n\nconst sidebarReducer = (state = initialState, {type, data}: ActionType): InitialStateType => {\n    return state\n}\n\nexport default sidebarReducer","import {applyMiddleware, combineReducers, compose, createStore} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { reducer as formReducer } from 'redux-form'\nimport profileReducer from './reducers/profileReducer'\nimport dialogsReducer from './reducers/dialogsReducer'\nimport sidebarReducer from './reducers/sidebarReducer'\nimport usersReducer from './reducers/usersReducer'\nimport auth from './reducers/auth'\nimport app from './reducers/app'\nimport security from './reducers/security'\n\nlet rootReducer = combineReducers({\n    profileReducer,\n    dialogsReducer,\n    sidebarReducer,\n    usersReducer,\n    auth,\n    app,\n    security,\n    form: formReducer,\n})\n\n// Defining code for a 'react-redux' chrome extension\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunkMiddleware)\n))\n\nexport default store\n\n// Infer actions object to get types of actions\ntype PropertiesTypes<T> = T extends {[key: string]: infer U} ? U : never\nexport type InferActionsTypes<T extends {[key: string]: (...args: any[]) => any}> = ReturnType<PropertiesTypes<T>>\n\n/**\n * That is shorter implementation of InferActionsType type\n * export type InferActionsType<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\n */\n\nexport type AppStateType = ReturnType<typeof rootReducer>\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/main/app/App';\n\nimport store from \"./redux/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import instance from \"./instance\";\nimport {ApiResponse} from \"../models/common\";\nimport {Credentials, LoginResponse, AuthResponse} from \"../models/auth\";\n\nexport default {\n    me: () => instance.get<ApiResponse<AuthResponse>>(`auth/me`).then(({data}) => data),\n    login: (formData: Credentials) => instance.post<ApiResponse<LoginResponse>>(`auth/login`, formData).then(({data}) => data),\n    logout: () => instance.delete<ApiResponse>(`auth/login`),\n};","import authAPI from \"../../api/auth\"\nimport {stopSubmit} from \"redux-form\"\nimport errors from '../../assets/dictonary/errors.json'\nimport {ThunkType} from \"../../models/redux\"\nimport {ResponseCodes} from \"../../utils/enums\"\nimport {fetchCaptcha} from \"./security\"\nimport {AuthResponse} from \"../../models/auth\"\nimport {InferActionsTypes} from \"../store\";\n\ntype InitialStateType = AuthResponse & {\n    isAuth: boolean,\n}\n\nconst initialState: InitialStateType = {\n    email: null as string | null,\n    login: null as string | null,\n    id: null as number | null,\n    isAuth: false as boolean,\n}\n\nconst auth = (state = initialState, action: ActionTypes): InitialStateType => {\n    switch (action.type) {\n        case 'auth/SET_AUTH_DATA':\n            return {\n                ...state,\n                ...action.data.authData,\n            }\n        case 'auth/SET_IS_AUTH':\n            return {\n                ...state,\n                isAuth: action.data.flag,\n            }\n\n        default:\n            return state\n    }\n}\n\nconst actions = {\n    setAuthData: (authData: AuthResponse) => ({\n        type: 'auth/SET_AUTH_DATA',\n        data: {\n            authData,\n        },\n    }) as const,\n    setIsAuth: (flag: boolean) => ({\n        type: 'auth/SET_IS_AUTH',\n        data: {\n            flag,\n        },\n    }) as const,\n}\n\nexport const authMe: ThunkType = () => async (dispatch: Function) => {\n    const { data, resultCode } = await authAPI.me()\n\n    if(resultCode === ResponseCodes.SUCCESS) {\n        const {\n            id,\n            login,\n            email,\n        } = data\n\n        dispatch(\n            actions.setAuthData({\n                id,\n                login,\n                email,\n            })\n        )\n        dispatch( actions.setIsAuth(true) )\n    }\n}\nexport const login: ThunkType = (formData) => async (dispatch: Function) => {\n    try {\n\n        const { resultCode, messages, data } = await authAPI.login(formData)\n\n\n        if (resultCode === ResponseCodes.SUCCESS) {\n            const {\n                userId,\n            } = data\n\n            dispatch(\n                actions.setAuthData({\n                    id: userId,\n                    email: null,\n                    login: null,\n                })\n            )\n            dispatch( actions.setIsAuth(true) )\n        } else if (resultCode === ResponseCodes.ANTI_BOT) {\n            dispatch( fetchCaptcha() )\n        }\n\n        dispatch(stopSubmit('login', {\n            _error:  messages.join('\\n'),\n        }))\n\n    } catch(error) {\n\n        dispatch(stopSubmit('login', {\n            _error: errors.nointernet,\n        }))\n\n    }\n}\nexport const logout: ThunkType = () => async (dispatch: Function) => {\n    await authAPI.logout()\n\n    const {\n        id,\n        login,\n        email,\n        isAuth,\n    } = initialState\n\n    dispatch(\n        actions.setAuthData({\n            id,\n            login,\n            email,\n        })\n    )\n    dispatch( actions.setIsAuth(isAuth) )\n}\n\nexport default auth\n\ntype ActionTypes = InferActionsTypes<typeof actions>\n","export enum ResponseCodes {\n    SUCCESS = 0,\n    ANTI_BOT = 10,\n}","import React, {FC} from 'react'\nimport s from './PreLoader.module.css'\n\nconst PreLoader: FC = () => {\n    return (\n        <div className={s.preLoader}>\n            LOADING...\n        </div>\n    )\n}\n\nexport default PreLoader\n","import {AppStateType} from \"../store\";\n\nexport const getCurrentUserId = ({auth}: AppStateType) => auth.id;\nexport const getIsAuth = ({auth}: AppStateType) => auth.isAuth;\nexport const getLogin = ({auth}: AppStateType) => auth.login;\n","import instance from \"./instance\";\nimport {GetCaptchaUrlResponse} from \"../models/security\";\n\nexport default {\n    getCaptchaUrl: () => instance.get<GetCaptchaUrlResponse>(`security/get-captcha-url`),\n};","import securityApi from \"../../api/security\";\nimport {ActionCreatorType, ThunkType} from \"../../models/redux\";\nconst SET_CAPTCHA_URL = 'security/SET-CAPTCHA-URL';\n\nconst initialState = {\n    captchaUrl: null as string | null,\n};\n\ntype initialStateType = typeof initialState\n\nconst security = (state = initialState, {type, data}: SecurityTypes): initialStateType => {\n    switch (type) {\n        case SET_CAPTCHA_URL:\n            return {\n                ...state,\n                captchaUrl: data.url,\n            };\n        default:\n            return state;\n    }\n};\n\ntype SetCaptchaUrlType = {\n    type: typeof SET_CAPTCHA_URL\n    data: {\n        url: typeof initialState.captchaUrl\n    }\n}\n\ntype SecurityTypes = SetCaptchaUrlType\n\nexport const setCaptchaUrl: ActionCreatorType = (url: string) => {\n  return {\n      type: SET_CAPTCHA_URL,\n      data: {\n          url,\n      },\n  };\n};\n\nexport const fetchCaptcha: ThunkType = () => async (dispatch) => {\n    const { data: responseData } = await securityApi.getCaptchaUrl();\n    const { url } = responseData;\n\n    dispatch( setCaptchaUrl(url) );\n};\n\nexport default security;","export const changeItemByPropName = (arr: any[], propName: string, id: number, obj: {}): any[] => {\n    return arr.map((item: any) => {\n        if (item[propName] === id) {\n            return {\n                ...item,\n                ...obj,\n            }\n        }\n\n        return item\n    })\n}\n\nexport const isTheSameAsStrings = (a: any, b: any): boolean => (a === b) || ( !a && !b )","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3WIx8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navLinkItem\":\"NavLinkItem_navLinkItem__mEIwt\",\"active\":\"NavLinkItem_active__pi9Ng\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendItem\":\"FriendItem_friendItem__1jmse\",\"wrapAvatar\":\"FriendItem_wrapAvatar__101pr\"};","import React, {FC} from 'react'\nimport defaultAvatar from '../../../assets/images/profileAvatar.png'\nimport styled from 'styled-components'\n\nconst WrapAvatar = styled.div`\n    overflow: hidden;\n    height: 100%;\n    border-radius: 50%;\n`\nconst AvatarImage = styled(WrapAvatar)`\n    max-width: 100%;\n    height: 100%;\n`\n\ntype Props = {\n    image: string | null\n}\n\nconst Avatar: FC<Props> = ({image = null}) => {\n    return (\n        <WrapAvatar>\n            <AvatarImage\n                as=\"img\"\n                src={image || defaultAvatar}\n                alt=\"Avatar\"\n            />\n        </WrapAvatar>\n    )\n}\n\nexport default Avatar\n","import axios from \"axios\"\n\nexport default axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.0',\n    // withCredentials: true,\n    // headers: {\n    //     'API-KEY': 'some-key',\n    // },\n});","import instance from \"./instance\";\nimport {ProfilePhotosType, ProfileInfoType, ProfileStatusResponseType} from \"../models/profile\";\nimport {ApiResponse} from \"../models/common\";\n\nexport default {\n    getProfile: (id: number) => instance.get<ApiResponse<ProfileInfoType>>(`profile/${id}`),\n    updateProfile: (profile: ProfileInfoType) => instance.put<ApiResponse<ProfileInfoType>>(`profile/`, profile),\n    getStatus: (id: number) => instance.get<ApiResponse<ProfileStatusResponseType>>(`profile/status/${id}`),\n    updateStatus: (status: string) => instance.put<ApiResponse>(`profile/status?status=${status}`),\n    updateAvatar: (file: any) => {\n        const formData = new FormData();\n        formData.append('image', file);\n\n        return instance.put<ApiResponse<ProfilePhotosType>>(`profile/photo`, formData, {\n            headers: {\n                'content-type': 'multipart/form-data',\n            },\n        });\n    },\n};","import profileAPI from \"../../api/profile\";\nimport {ResponseCodes} from \"../../utils/enums\";\nimport {ActionCreatorType, ActionType, ThunkType} from \"../../models/redux\";\nimport {\n    ProfileType,\n    ProfilePhotosType,\n    ProfileInfoType,\n    ProfileStatusResponseType, PostsRowType\n} from \"../../models/profile\";\n\nconst ADD_POST = 'profile/ADD-POST';\nconst SET_USER_PROFILE = 'profile/SET-USER-PROFILE';\nconst SET_USER_STATUS = 'profile/SET-USER-STATUS';\nconst UPDATE_AVATAR_SUCCESS = 'profile/UPDATE-AVATAR-SUCCESS';\n\nlet initialState = {\n    profile: {\n        aboutMe: '',\n        contacts: {\n            facebook: null,\n            website: null,\n            vk: null,\n            twitter: null,\n            instagram: null,\n            youtube: null,\n            github: null,\n            mainLink: null,\n        },\n        lookingForAJob: false,\n        lookingForAJobDescription: '',\n        fullName: '',\n        userId: null,\n        photos: {\n            small: null,\n            large: null,\n        },\n    } as ProfileType,\n    status: '' as ProfileStatusResponseType,\n    posts: [\n        {\n            message: 'I don\\'t take this too seriously!',\n            author: 'Dmitry',\n            likesCount: 12,\n        },\n        {\n            message: 'No way!',\n            author: 'Dmitry',\n            likesCount: 55,\n        },\n    ] as PostsRowType\n};\n\ntype InitialStateType = typeof initialState;\n\nconst profileReducer = (state = initialState, {type, data}: ActionType): InitialStateType => {\n    switch (type) {\n        case ADD_POST: {\n            const message = data.postText;\n\n            return {\n                ...state,\n                posts: [\n                    {\n                        id: 5,\n                        message,\n                        author: 'Dmitry',\n                        likesCount: 5,\n                    },\n                    ...state.posts,\n                ],\n            };\n        }\n        case SET_USER_PROFILE: {\n            const {profile} = data;\n\n            return {\n                ...state,\n                profile,\n            };\n        }\n        case SET_USER_STATUS: {\n            const {status} = data;\n\n            return {\n                ...state,\n                status,\n            };\n        }\n        case UPDATE_AVATAR_SUCCESS: {\n            const photos: ProfilePhotosType = {\n                small: 'fds',\n                large: 'fds',\n            };\n\n            return {\n                ...state,\n                profile: {\n                    ...state.profile,\n                    photos,\n                },\n            };\n        }\n        default:\n            return state;\n    }\n};\n\nexport const addPost: ActionCreatorType = (postText: string) => ({\n    type: ADD_POST,\n    data: {\n        postText,\n    },\n});\nexport const setUserProfile: ActionCreatorType = (profile: ProfileInfoType) => ({\n    type: SET_USER_PROFILE,\n    data: {\n        profile,\n    },\n});\nexport const setUserStatus: ActionCreatorType = (status: string) => ({\n    type: SET_USER_STATUS,\n    data: {\n        status,\n    },\n});\nexport const updateAvatarSuccess: ActionCreatorType = (photos: ProfilePhotosType) => ({\n    type: SET_USER_STATUS,\n    data: {\n        photos,\n    },\n});\n\nexport const fetchProfile: ThunkType = (id: number) => async (dispatch) => {\n    const { data } = await profileAPI.getProfile(id);\n\n    dispatch( setUserProfile(data) );\n};\nexport const fetchStatus: ThunkType = (id: number) => async (dispatch) => {\n    const { data } = await profileAPI.getStatus(id);\n\n    dispatch( setUserStatus(data) );\n};\nexport const updateStatus: ThunkType = (status: string) => async (dispatch) => {\n    const { data } = await profileAPI.updateStatus(status);\n    console.log(data)\n    // dispatch( setUserStatus(data) );\n};\nexport const updateAvatar: ThunkType = (file) => async (dispatch) => {\n    const { data } = await profileAPI.updateAvatar(file);\n\n    dispatch( updateAvatarSuccess(data) );\n};\nexport const updateProfile: ThunkType = (newProfile: ProfileInfoType) => async (dispatch) => {\n    const { data } = await profileAPI.updateProfile(newProfile);\n\n    if(data.resultCode === ResponseCodes.SUCCESS) {\n        fetchProfile(newProfile.userId);\n    }\n};\nexport default profileReducer;","import {ActionCreatorType} from \"../../models/redux\";\nimport {DialogsRowType, DialogType} from \"../../models/dialogs\";\n\nconst SEND_MESSAGE = 'dialog/SEND-MESSAGE';\n\nconst initialState = {\n    dialogs: [\n        {\n            name: 'Ti',\n            id: 1,\n            message: 'What\\'s the point?',\n        },\n        {\n            name: 'Kony',\n            id: 2,\n            message: 'Need this asap.',\n        }\n    ] as DialogsRowType,\n    dialog: {\n        id: 1,\n        interlocutor: 'Ti',\n        messages: [\n            {\n                message: 'This is rather a suggestive comment',\n                author: 'Dmitry',\n            },\n            {\n                message: 'You are lucky!',\n                author: 'Ti',\n            },\n            {\n                message: 'What\\'s the point?',\n                author: 'Dmitry',\n            },\n        ],\n    } as DialogType,\n};\ntype InitialStateType = typeof initialState;\n\nconst dialogsReducer = (state = initialState, action: DialogsReducerTypes): InitialStateType => {\n    switch (action.type) {\n        case SEND_MESSAGE: {\n            const message = action.data.messageText;\n\n            return {\n                ...state,\n                dialog: {\n                    ...state.dialog,\n                    messages: [\n                        ...state.dialog.messages,\n                        {\n                            message,\n                            author: 'Dmitry',\n                        },\n                    ],\n                },\n            };\n        }\n        default:\n            return state;\n    }\n};\n\ntype SendMessageType = {\n    type: typeof SEND_MESSAGE\n    data: {\n        messageText: string\n    }\n}\n\ntype DialogsReducerTypes = SendMessageType\n\nexport const sendMessage: ActionCreatorType<SendMessageType> = (messageText: string) => ({\n    type: SEND_MESSAGE,\n    data: {\n        messageText,\n    },\n});\n\nexport default dialogsReducer;","import instance from \"./instance\";\nimport {ApiResponse} from \"../models/common\";\n\nexport default {\n    follow: (id: number) => instance.post<ApiResponse>(`/follow/${id}`),\n    unfollow: (id: number) => instance.delete<ApiResponse>(`/follow/${id}`),\n};","import instance from \"./instance\";\nimport {GetUsersResponse} from \"../models/users\";\n\nexport default {\n    getUsers: (count: number, page: number) =>\n        instance.get<GetUsersResponse>(`users?count=${count}&page=${page}`).then(({data}) => data),\n};","import followAPI from \"../../api/follow\";\nimport userAPI from \"../../api/users\";\nimport {changeItemByPropName} from \"../../utils/helpers\";\nimport {ActionCreatorType, ActionType, ThunkType} from \"../../models/redux\";\nimport {ProfileInfoType} from \"../../models/profile\";\nimport {Dispatch} from \"redux\";\nimport {UsersRowType} from \"../../models/users\";\n\nconst FOLLOW = 'users/FOLLOW';\nconst UNFOLLOW = 'users/UNFOLLOW';\nconst SET_USERS = 'users/SET-USERS';\nconst SET_CURRENT_PAGE = 'users/SET-CURRENT-PAGE';\nconst SET_ITEMS_PER_PAGE = 'users/SET-ITEMS-PER-PAGE';\nconst SET_TOTAL_ITEMS_COUNT = 'users/SET-TOTAL-ITEMS-COUNT';\nconst SET_DATA_FETCHING= 'users/SET-DATA-FETCHING';\nconst SET_IS_FOLLOWING_FETCHING= 'users/SET-IS-FOLLOWING-FETCHING';\n\nconst initialState = {\n    users: [] as UsersRowType,\n    currentPage: 1 as number,\n    itemsPerPage: 5 as number,\n    totalItemsCount: 0 as number,\n    isDataFetching: false as boolean,\n    isFollowingFetching: false as boolean,\n    followingFetchingList: [] as Array<number>,\n};\n\ntype InitialStateType = typeof initialState;\n\nconst usersReducer = (state = initialState, {type, data}: ActionType): InitialStateType => {\n    switch (type) {\n        case FOLLOW:\n            return {\n                ...state,\n                ...changeItemByPropName(state.users, 'id', data.id, { followed: true }),\n            };\n        case UNFOLLOW:\n            return {\n                ...state,\n                ...changeItemByPropName(state.users, 'id', data.id, { followed: false }),\n            };\n        case SET_USERS:\n            return {\n                ...state,\n                users: data.users,\n            };\n        case SET_CURRENT_PAGE:\n            return {\n                ...state,\n                currentPage: data.page,\n            };\n        case SET_ITEMS_PER_PAGE:\n            return {\n                ...state,\n                itemsPerPage: data.count,\n            };\n        case SET_TOTAL_ITEMS_COUNT:\n            return {\n                ...state,\n                totalItemsCount: data.count,\n            };\n        case SET_DATA_FETCHING:\n            return {\n                ...state,\n                isDataFetching: data.flag,\n            };\n        case SET_IS_FOLLOWING_FETCHING:\n            const isFollowingFetching = data.flag;\n            const followingFetchingList =\n                isFollowingFetching ?\n                    [...state.followingFetchingList,data.id,]\n                    : state.followingFetchingList.filter((id) => id !== data.id);\n\n            return {\n                ...state,\n                isFollowingFetching,\n                followingFetchingList: [\n                    ...followingFetchingList,\n                ]\n            };\n        default:\n            return state;\n    }\n};\n\nexport const followAC: ActionCreatorType = (id: number) => {\n  return {\n      type: FOLLOW,\n      data: {\n        id,\n      },\n  };\n};\nexport const unfollowAC: ActionCreatorType = (id: number) => {\n    return {\n        type: UNFOLLOW,\n        data: {\n            id,\n        },\n    };\n};\nexport const setUsers: ActionCreatorType = (users: Array<ProfileInfoType>) => {\n    return {\n        type: SET_USERS,\n        data: {\n            users,\n        },\n    };\n};\nexport const setCurrentPage: ActionCreatorType = (page: number) => {\n    return {\n        type: SET_CURRENT_PAGE,\n        data: {\n            page,\n        },\n    };\n};\nexport const setTotalItemsCount: ActionCreatorType = (count: number) => {\n    return {\n        type: SET_TOTAL_ITEMS_COUNT,\n        data: {\n            count,\n        },\n    };\n};\nexport const setItemsPerPage: ActionCreatorType = (count: number) => {\n    return {\n        type: SET_ITEMS_PER_PAGE,\n        data: {\n            count,\n        },\n    };\n};\nexport const setDataFetching: ActionCreatorType = (flag: boolean) => {\n    return {\n        type: SET_DATA_FETCHING,\n        data: {\n            flag,\n        },\n    };\n};\nexport const setIsFollowingFetching: ActionCreatorType = (flag: boolean, id: number) => {\n    return {\n        type: SET_IS_FOLLOWING_FETCHING,\n        data: {\n            flag,\n            id,\n        },\n    };\n};\n\nconst followUnfollowFlow = async (dispatch: Dispatch, apiMethod: Function, actionCreator: ActionCreatorType, id: number) => {\n    dispatch( setIsFollowingFetching(true, id) );\n\n    try {\n        await apiMethod(id);\n    } catch {}\n\n    actionCreator(id);\n\n    dispatch( setIsFollowingFetching(false, id) );\n};\n\nexport const follow: ThunkType = (id: number) => async (dispatch) => {\n    await followUnfollowFlow(dispatch, followAPI.follow, followAC, id);\n};\nexport const unfollow: ThunkType = (id: number) => async (dispatch) => {\n    await followUnfollowFlow(dispatch, followAPI.unfollow, unfollowAC, id);\n};\nexport const fetchUsers: ThunkType = (itemsPerPage, page) => async (dispatch) => {\n    dispatch( setDataFetching(true) );\n\n    const { items, totalCount } = await userAPI.getUsers(itemsPerPage, page);\n\n    dispatch( setDataFetching(false) );\n    dispatch( setUsers(items) );\n    dispatch( setTotalItemsCount(totalCount) );\n    dispatch( setCurrentPage(page) );\n};\n\nexport default usersReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"PreLoader_form__1KiUV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendsBlock\":\"FriendsBlock_friendsBlock__1O8cg\"};"],"sourceRoot":""}