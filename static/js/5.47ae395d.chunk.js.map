{"version":3,"sources":["components/common/formControl/FormControl.tsx","components/common/formControl/FormControl.module.css","utils/validations.ts","components/common/messageForm/MessageForm.tsx","components/common/messageForm/MessageForm.module.css","components/pages/dialogs/DialogsContainer.module.css","components/pages/dialogs/dialog/Dialog.module.css","components/pages/dialogs/dialog/dialogRow/DialogRow.module.css","components/common/messageItem/MessageItem.module.css","components/pages/dialogs/dialogsRow/DialogsRow.module.css","components/common/messageItem/MessageItem.tsx","components/pages/dialogs/dialog/dialogRow/DialogRow.tsx","components/pages/dialogs/dialog/Dialog.tsx","components/pages/dialogs/dialogsRow/DialogsRow.tsx","components/hocs/withAuthRedirect.tsx","components/pages/dialogs/DialogsContainer.tsx"],"names":["FormControl","ChildElement","props","input","rest","childTag","meta","React","createElement","this","touched","error","hasError","className","s","formControl","Component","Input","Textarea","module","exports","required","value","undefined","reduxForm","form","handleSubmit","onSubmit","component","name","validate","type","MessageItem","author","message","onClick","messageItem","wrapAvatar","href","Avatar","image","content","text","DialogRow","dialog","messages","interlocutor","dialogElements","map","key","isOwnMessage","dialogRow","Dialog","onMessageFormSubmit","wrapDialog","MessageForm","captchaUrl","DialogsRow","dialogsElements","dialogs","id","console","log","wrapDialogsRow","withRouterRedirect","connect","state","isAuth","getIsAuth","connector","to","mapDispatch","sendMessage","dialogsReducer","DialogsContainer","messageText","withAuthRedirect"],"mappings":"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","file":"static/js/5.47ae395d.chunk.js","sourcesContent":["import React from 'react'\nimport s from './FormControl.module.css'\nimport {WrappedFieldProps} from \"redux-form\"\n\n// If necessary use type for field generic attrs - GenericFieldHTMLAttributes\n\ntype FormControlProps = WrappedFieldProps & {\n    childTag: string\n}\n\nclass FormControl extends React.Component<FormControlProps> {\n    // Is here to avoid rerender of ChildElement\n    ChildElement = () => {\n        const { input, childTag, meta, ...rest } = this.props\n\n        return React.createElement(this.props.childTag, {\n            ...input, ...rest,\n        })\n    }\n\n    render() {\n        const { meta } = this.props\n        const { touched, error } = meta\n        const hasError = touched && error\n\n        const ChildElement = this.ChildElement\n\n        return (\n            <div className={`${s.formControl} ${hasError ? s.error : ''}`}>\n                <div>\n                    <ChildElement />\n                </div>\n                <div>\n                    <span>{ hasError && error }</span>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport const Input = (props: WrappedFieldProps) => {\n    return <FormControl { ...props } childTag=\"input\"/>\n}\n\nexport const Textarea = (props: WrappedFieldProps) => {\n    return <FormControl { ...props } childTag=\"textarea\"/>\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__1kqA_\",\"error\":\"FormControl_error__31xnP\"};","import {Validator} from \"../models/common\";\n\nexport const required: Validator = (value) => (value) ? undefined : 'Field is required.';\n","import React, {FC} from 'react'\nimport s from './MessageForm.module.css'\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\"\nimport {Textarea} from \"../formControl/FormControl\"\nimport {required} from \"../../../utils/validations\"\n\ntype CustomProps =  {\n    onSubmit: ({messageText}: any) => void\n    captchaUrl: string | null\n}\n\nconst MessageForm: FC<CustomProps & InjectedFormProps<{}, CustomProps>> = ({handleSubmit, onSubmit}) => {\n    return (\n        <form\n            className={s.form}\n            onSubmit={handleSubmit(onSubmit)}\n        >\n            <div>\n                <Field\n                    component={Textarea}\n                    name=\"messageText\"\n                    validate={[required]}\n                />\n            </div>\n            <div>\n                <button type=\"submit\">Send</button>\n            </div>\n        </form>\n    )\n}\n\nexport default reduxForm<{}, CustomProps>({\n    form: 'message',\n})(MessageForm)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"MessageForm_form__1Or3f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"DialogsContainer_dialogs__3rbrz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapDialog\":\"Dialog_wrapDialog__-NIrX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageItem\":\"DialogRow_messageItem__1uBOI\",\"text\":\"DialogRow_text__ySo1h\",\"name\":\"DialogRow_name__1l2A6\",\"author\":\"DialogRow_author__1anD1\",\"wrapAvatar\":\"DialogRow_wrapAvatar__1tzTx\",\"content\":\"DialogRow_content__13J40\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageItem\":\"MessageItem_messageItem___5K7D\",\"text\":\"MessageItem_text__3AvQO\",\"name\":\"MessageItem_name__26KHh\",\"author\":\"MessageItem_author__2ncYp\",\"wrapAvatar\":\"MessageItem_wrapAvatar__p7XTL\",\"content\":\"MessageItem_content__3nkcm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapDialogsRow\":\"DialogsRow_wrapDialogsRow__1ljLy\"};","import React, {FC} from 'react'\nimport s from './MessageItem.module.css'\nimport Avatar from \"../avatar/Avatar\"\nimport {MessageType} from \"../../../models/dialogs\"\n\ntype Props = MessageType & {\n    onClick: (...args: any) => void\n}\n\nconst MessageItem: FC<Props> = ({author, message, onClick}) => {\n    return (\n        <div\n            className={s.messageItem}\n            onClick={onClick}\n        >\n            <div className={s.wrapAvatar}>\n                <a href=\"#!\">\n                    <Avatar image={null}/>\n                </a>\n            </div>\n            <div className={s.content}>\n                <div className={s.text}>\n                    <a href=\"#!\">\n                        <div className={s.name}>\n                            {author}\n                        </div>\n                    </a>\n                    <div className={s.text}>\n                        {message}\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default MessageItem\n","import React, {FC} from 'react'\nimport s from './DialogRow.module.css'\nimport MessageItem from '../../../../common/messageItem/MessageItem'\nimport {DialogType} from \"../../../../../models/dialogs\";\n\ntype Props = {\n    dialog: DialogType\n}\n\nconst DialogRow: FC<Props> = ({dialog}) => {\n    const {\n        messages,\n        interlocutor,\n    } = dialog\n\n    const dialogElements = messages.map((messageItem, key) => {\n        const {\n            author,\n            message,\n        } = messageItem\n        const isOwnMessage = (interlocutor !== author)\n\n        return (\n            <li key={key} className={(isOwnMessage) ? s.author : null}>\n                <MessageItem\n                    author={author}\n                    message={message}\n                    onClick={() => null}\n                />\n            </li>\n        )\n    })\n\n    return (\n        <div className={s.dialogRow}>\n            <ul>\n                { dialogElements }\n            </ul>\n        </div>\n    )\n}\n\nexport default DialogRow\n","import React, {FC} from 'react'\nimport s from './Dialog.module.css'\nimport DialogRow from './dialogRow/DialogRow'\nimport MessageForm from '../../../common/messageForm/MessageForm'\nimport {DialogType} from \"../../../../models/dialogs\";\n\ntype Props = {\n    dialog: DialogType\n    onMessageFormSubmit: ({messageText}: any) => void\n}\n\nconst Dialog: FC<Props> = ({dialog, onMessageFormSubmit}) => {\n    const {interlocutor} = dialog\n\n    return (\n        <div className={s.wrapDialog}>\n            <h3>Dialog with {interlocutor}</h3>\n            <DialogRow\n                dialog={dialog}\n            />\n            <MessageForm\n                captchaUrl={null}\n                onSubmit={onMessageFormSubmit}\n            />\n        </div>\n    )\n}\n\nexport default Dialog\n","import React, {FC} from 'react'\nimport s from './DialogsRow.module.css'\nimport MessageItem from '../../../common/messageItem/MessageItem'\nimport {DialogsRowType} from \"../../../../models/dialogs\";\n\ntype Props = {\n    dialogs: DialogsRowType\n}\n\nconst DialogsRow: FC<Props> = ({dialogs}) => {\n    const dialogsElements = dialogs.map(({name, message, id}) => (\n        <li key={id}>\n            <MessageItem\n                author={name}\n                message={message}\n                onClick={() => {\n                    console.log(id)\n                }}\n            />\n        </li>\n    ))\n\n    return (\n        <div className={s.wrapDialogsRow}>\n            <h3>Dialogs</h3>\n            <ul>\n                { dialogsElements }\n            </ul>\n        </div>\n    )\n}\n\nexport default DialogsRow\n","import React, {FC} from 'react'\nimport {connect, ConnectedProps} from \"react-redux\"\nimport {Redirect} from \"react-router-dom\"\nimport {getIsAuth} from \"../../redux/selectors/auth\"\nimport {AppStateType} from \"../../redux/store\"\n\nconst withRouterRedirect = (Component: typeof React.Component) => {\n    const mapState = (state: AppStateType) => ({\n        isAuth: getIsAuth(state),\n    })\n\n    const connector = connect(mapState, {})\n\n    type PropsFromRedux = ConnectedProps<typeof connector>\n    type Props = PropsFromRedux\n\n    const HOC: FC<Props> = (props) => {\n        if( !props.isAuth ) return <Redirect to=\"/login\"/>\n\n        return <Component/>\n    }\n\n    return connector(HOC)\n}\n\nexport default withRouterRedirect","import React from 'react'\nimport s from './DialogsContainer.module.css'\nimport Dialog from './dialog/Dialog'\nimport {sendMessage} from '../../../redux/reducers/dialogsReducer'\nimport {connect, ConnectedProps} from 'react-redux'\nimport DialogsRow from './dialogsRow/DialogsRow'\nimport withAuthRedirect from '../../hocs/withAuthRedirect'\nimport {DialogsRowType, DialogType} from '../../../models/dialogs'\nimport {AppStateType} from '../../../redux/store'\n\nconst mapState = ({dialogsReducer}: AppStateType) => ({\n    dialogs: dialogsReducer.dialogs,\n    dialog: dialogsReducer.dialog,\n})\nconst mapDispatch = {\n    sendMessage,\n}\nconst connector = connect(mapState, mapDispatch);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & {\n    dialog: DialogType\n    dialogs: DialogsRowType\n}\n\nclass DialogsContainer extends React.Component<Props> {\n    onMessageFormSubmit = ({messageText}: any) => {\n        this.props.sendMessage(messageText)\n    }\n\n    render() {\n        const {\n            dialog,\n            dialogs,\n        } = this.props\n\n        return (\n            <div className={s.dialogs}>\n                <DialogsRow dialogs={dialogs}/>\n                <Dialog\n                    dialog={dialog}\n                    onMessageFormSubmit={this.onMessageFormSubmit}\n                />\n            </div>\n        )\n    }\n}\n\nexport default connector(withAuthRedirect(DialogsContainer))\n"],"sourceRoot":""}